{
  "interface": "0.0.0.0:4984",
  "adminInterface": "0.0.0.0:4985",
  "logFilePath": "logs/sync_gateway.log",
  "log": ["*"],
  "databases": {
    "soter": {
      "bucket": "{{ syncgateway_bucket }}",
      "revs_limit": 1,
      "sync": "function(doc, oldDoc, user){\n// Generated by CoffeeScript 2.0.0-beta8\nvar arrayDiff, backendTypes, hasAccess, isValidShare, permission, resolveId, user, verifyPermissions;\nuser = realUserCtx;\nbackendTypes = [\n  'user',\n  'userprivate',\n  'lookup'\n];\nverifyPermissions = null != (null != user ? user.name : void 0);\nisValidShare = function (name) {\n  return typeof name === 'string' && /^(role:)*[0-9a-zA-Z_]+$/.test(name);\n};\nhasAccess = function (share) {\n  if (share.slice(0, 5) === 'role:')\n    share = share.slice(5);\n  return in$(share, user.channels);\n};\nresolveId = function (key) {\n  if (key.slice(0, 4) === 'role')\n    return 'role:' + key;\n  return key;\n};\narrayDiff = function (oldArray, newArray) {\n  var added, item, removed;\n  added = [];\n  removed = [];\n  for (var i$ = 0, length$ = newArray.length; i$ < length$; ++i$) {\n    item = newArray[i$];\n    if (!!in$(item, oldArray))\n      continue;\n    added.push(item);\n  }\n  for (var i$1 = 0, length$1 = oldArray.length; i$1 < length$1; ++i$1) {\n    item = oldArray[i$1];\n    if (!!in$(item, newArray))\n      continue;\n    removed.push(item);\n  }\n  return {\n    added: added,\n    removed: removed,\n    all: added.concat(removed)\n  };\n};\nif (doc._deleted) {\n  if (verifyPermissions)\n    reject(403, 'not allowed');\n  return;\n}\nif (!(null != doc.type)) {\n  reject(403, 'missing type');\n  return;\n}\nif (!in$(doc.type, backendTypes)) {\n  if (!/^[0-9a-z]+_[0-9a-z_]+$/i.test(doc._id)) {\n    reject(403, 'invalid id');\n    return;\n  }\n  if (doc._id.substr(0, doc._id.indexOf('_')) !== doc.type) {\n    reject(403, 'type/id mismatch');\n    return;\n  }\n  if (!(null != doc.permissions)) {\n    reject(403, 'missing permissions object');\n    return;\n  }\n  if (!isValidShare(doc.permissions.owner)) {\n    reject(403, 'invalid owner in permissions');\n    return;\n  }\n  if (!Array.isArray(doc.permissions.view) || !doc.permissions.view.every(isValidShare)) {\n    reject(403, 'invalid view permissions');\n    return;\n  }\n  if (!Array.isArray(doc.permissions.edit) || !doc.permissions.edit.every(isValidShare)) {\n    reject(403, 'invalid edit permissions');\n    return;\n  }\n  if (!Array.isArray(doc.permissions['delete']) || !doc.permissions['delete'].every(isValidShare)) {\n    reject(403, 'invalid delete permissions');\n    return;\n  }\n  if (doc.deleted !== void 0 && typeof doc.deleted !== 'boolean') {\n    reject(403, 'invalid delete flag');\n    return;\n  }\n}\nif (verifyPermissions && in$(doc.type, backendTypes)) {\n  reject(403, 'no access');\n  return;\n}\nif (verifyPermissions && ('undefined' !== typeof oldDoc && null != oldDoc) && !oldDoc._deleted) {\n  if (doc.type !== oldDoc.type) {\n    reject(403, 'can not change type');\n    return;\n  }\n  if (doc.permissions.owner !== oldDoc.permissions.owner) {\n    if (!user.name === oldDoc.permissions.owner) {\n      reject(403, 'Only the current owner can promote another to owner');\n      return;\n    }\n    if (!isValidShare(doc.permissions.owner)) {\n      reject(403, 'New owner is not a valid share');\n      return;\n    }\n    for (var cache$ = [\n          'view',\n          'edit',\n          'delete'\n        ], i$ = 0, length$ = cache$.length; i$ < length$; ++i$) {\n      permission = cache$[i$];\n      if (!in$(doc.permissions.owner, doc.permissions[permission])) {\n        reject(403, 'New owner must have explicit view/edit/delete permissions');\n        return;\n      }\n    }\n  }\n  if (!oldDoc.permissions.edit.some(hasAccess)) {\n    reject(403, 'no edit permissions');\n    return;\n  }\n  if (doc.deleted !== oldDoc.deleted)\n    if (!oldDoc.permissions['delete'].some(hasAccess)) {\n      reject(403, 'no delete permissions');\n      return;\n    }\n} else if (verifyPermissions) {\n  if (in$(doc.type, backendTypes)) {\n    reject(403, 'type not allowed');\n    return;\n  }\n  if (user.name !== doc.permissions.owner) {\n    reject(403, 'invalid owner');\n    return;\n  }\n  if (doc.deleted === true) {\n    reject(403, 'can not create as deleted');\n    return;\n  }\n}\nswitch (doc.type) {\ncase 'user':\n  role(doc._id, doc.roles.map(function (role) {\n    return 'role:' + role;\n  }));\n  access(doc._id, doc._id);\n  channel(doc._id);\n  channel(doc.roles);\n  break;\ncase 'role':\n  role(doc.members.map(resolveId), 'role:' + doc._id);\n  access('role:' + doc._id, doc._id);\n  channel(doc._id);\n  channel(doc.members);\n  break;\ndefault:\n  if (!in$(doc.type, backendTypes) && doc.deleted !== true)\n    channel(doc.permissions.view);\n}\nfunction in$(member, list) {\n  for (var i = 0, length = list.length; i < length; ++i)\n    if (i in list && list[i] === member)\n      return true;\n  return false;\n}\n}",
      "server": "{{ couchbase_admin_url }}"
    }
  }
}
